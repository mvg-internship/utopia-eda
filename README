### Requirements

The list of tools required to build the project:

* `cmake` 3.13+
* `flex`
* `bison`
* `clang-tidy`
* `zlib1g-dev`
* C++17-compatible compiler (e.g, `gcc` or `clang`)
* CMake-supported "build" system (e.g., `make` or `ninja`)
* `CUDD` library

CUDD installation

1. Get `CUDD` from here: https://github.com/ivmai/cudd
2. Configure and build `CUDD` as described in the `<CUDD-source-dir>/README`

If you built `CUDD` not in the default directory (/usr/local) then, 
before building the utopia IDE, you must set the environment variable 
`CUDD_DIR` to the path to the directory containing the `CUDD` library:

```
export CUDD_DIR=<cudd-dir>
```

[CUDD]: https://github.com/ivmai/cudd

### Coding Style

We use [LLVM Coding Conventions](https://llvm.org/docs/CodingStandards.html) with some project-specific refinements.

### Compiling from Command Line

```
cmake -S . -B build # -G Ninja etc.
cd build
make # ninja, etc.
```

### Configuring with `yosys`

1. Get `yosys` source code from the [^yosys] into `<yosys-dir>`
2. Make sure your system meets the requirements listed in `<yosys-dir>/README.md`
3. Edit `<yosys-dir>/Makefile`
    - set `ENABLE_LIBYOSYS` to 1
4. Configure and build `yosys` as described in the `<yosys-dir>/README.md`
5. Configure `Utopia` to find `yosys`
    - add `-DYosys_ROOT=<yosys-dir>` to the `cmake` invocation
    - e.g. `cmake -S <utopia-source-dir> -B <utopia-build-dir> -DYosys_ROOT=<yosys-dir>`

[^yosys]: https://github.com/YosysHQ/yosys

### Running from Command Line

To list all options for the Utopia EDA do the following:
```
<build-dir>/src/umain -h
```

To run Utopia EDA as a logic synthesis tool for the specified RIL description,
do the following:
```
<build-dir>/src/umain rtl <path-to-input-RIL-file>
```

### Running Tests

Running applications and tests based on `libueda` requires environment variable
`UTOPIA_HOME` to contain the path to the source code directory.

```
export UTOPIA_HOME=<utopia-source-dir>
<build-dir>/test/utest
```
