### Requirements

The list of tools required to build the project:

* `cmake` 3.13+
* `flex`
* `bison`
* `clang-tidy`
* `zlib1g-dev`
* C++17-compatible compiler (e.g, `gcc` or `clang`)
* CMake-supported "build" system (e.g., `make` or `ninja`)
* `CUDD` library (see installation guide below)

CUDD installation

1. Get `CUDD` from here: https://github.com/ivmai/cudd
2. Configure and build `CUDD` as described in the `<CUDD-source-dir>/README`

If you built `CUDD` not in the default directory (/usr/local) then, 
before building the Utopia IDE, you must set the environment variable 
`CUDD_DIR` to the path to the directory containing the `CUDD` library:

```
export CUDD_DIR=<cudd-dir>
```

[CUDD]: https://github.com/ivmai/cudd

### Coding Style

We use [LLVM Coding Conventions](https://llvm.org/docs/CodingStandards.html)
with project-specific modifications.

Some of them:

1. Use LF-ended source files (*.cpp, *.h, *.hpp, etc.);
2. Use ASCII symbols only (no Cyrillic symbols are allowed);
3. Basic indent is 2 spaces (no tabs are allowed);
4. Maximum line length is 80 (no trailing whitespaces!);
5. Do not use multiple blank lines in succession;
6. Use lowercase_underscore_separated style for names of source files;
7. Use UpperCamelCase style for names of classes/enums/structures/unions;
8. Use lowerCamelCase for names of functions/methods/objects/variables;
9. "{" symbol should be at the same line as the related operator has;
10. "using namespace" is forbidden;
11. Source files should have header comments (set the `<yearnum>` here):

```cpp
//===----------------------------------------------------------------------===//
//
// Part of the Utopia EDA Project, under the Apache License v2.0
// SPDX-License-Identifier: Apache-2.0
// Copyright <yearnum> ISP RAS (http://www.ispras.ru)
//
//===----------------------------------------------------------------------===//
```

12. All the header files should have Doxygen-formatted comments for classes:

```cpp
/**
 * \brief Implements a very useful thing.
 * \author <a href="mailto:ivanov@somemail.somedomain">Ivan Ivanov</a>
 */
```

13. All the includes should be listed in the following order: 1) project's own
includes; 2) side library includes; 3) system includes. Includes should be
sorted in alphabetical order at every category.

### Compiling from Command Line

```
cmake -S . -B build # -G Ninja etc.
cd build
make # ninja, etc.
```

### Configuring with `yosys`

1. Get `yosys` source code from the [^yosys] into `<yosys-dir>`
2. Make sure your system meets the requirements listed in `<yosys-dir>/README.md`
3. Edit `<yosys-dir>/Makefile`
    - set `ENABLE_LIBYOSYS` to 1
4. Configure and build `yosys` as described in the `<yosys-dir>/README.md`
5. Configure `Utopia` to find `yosys`
    - add `-DYosys_ROOT=<yosys-dir>` to the `cmake` invocation
    - e.g. `cmake -S <utopia-source-dir> -B <utopia-build-dir> -DYosys_ROOT=<yosys-dir>`

[^yosys]: https://github.com/YosysHQ/yosys

### Running from Command Line

To list all options for the Utopia EDA do the following:
```
<build-dir>/src/umain -h
```

To run Utopia EDA as a logic synthesis tool for the specified RIL description,
do the following:
```
<build-dir>/src/umain rtl <path-to-input-RIL-file>
```

### Running Tests

Running applications and tests based on `libueda` requires environment variable
`UTOPIA_HOME` to contain the path to the source code directory.

```
export UTOPIA_HOME=<utopia-source-dir>
<build-dir>/test/utest
```
To keep `UTOPIA_HOME` variable persistently at your system,
add the following line to your `.bashrc` (or `profile`) file:
```
export UTOPIA_HOME=<utopia-source-dir>
```
and, if needed, reinitialize the environment:
```
source ~/.bashrc
```